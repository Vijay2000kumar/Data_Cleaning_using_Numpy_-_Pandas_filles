# -*- coding: utf-8 -*-
"""incremental loading through csv file.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HizkmiG4sGiyZENk9nrpC_jCYN52iTh1
"""

import pandas as pd
from datetime import datetime

class IncrementalLoader:
    @staticmethod
    def perform_incremental_loading(existing_df, new_df, timestamp_column):
        existing_df[timestamp_column] = pd.to_datetime(existing_df[timestamp_column])
        new_df[timestamp_column] = pd.to_datetime(new_df[timestamp_column])

        merged_df = pd.concat([existing_df, new_df], ignore_index=True)
        deduplicated_df = merged_df.drop_duplicates(subset=timestamp_column, keep='last')

        return deduplicated_df

class FileUpdater:
    @staticmethod
    def update_files(updated_df, existing_df, filename, timestamp_column):
        final_df = pd.concat([existing_df, updated_df], ignore_index=True)
        final_df.to_csv(filename, index=False)

class DataProcessor:
    @staticmethod
    def process_data(watermark_value, last_watermark, updated_df, existing_df, filename, timestamp_column):
        current_timestamp = datetime.now()

        updated_df['watermark'] = watermark_value
        updated_df['updated_timestamp'] = current_timestamp

        if watermark_value > last_watermark:
            FileUpdater.update_files(updated_df, existing_df, filename, timestamp_column)
            print("Data updated successfully.")
        else:
            print("No new data to update.")

def add_timestamp_column(df, timestamp_column_name):
    df[timestamp_column_name] = datetime.now()
    return df

def main():
    customer_csv = 'customer.csv'  # Path to your customer CSV file
    sales_csv = 'sales.csv'        # Path to your sales CSV file

    timestamp_column_customer = 'entrydate'
    timestamp_column_sales = 'salesdate'

    # Load CSV data into DataFrames
    customer_df = pd.read_csv(customer_csv)
    sales_df = pd.read_csv(sales_csv)

    # Add timestamp columns to the dataframes
    customer_df = add_timestamp_column(customer_df, timestamp_column_customer)
    sales_df = add_timestamp_column(sales_df, timestamp_column_sales)

    new_customer_data = pd.DataFrame([
        {'CustomerID': 4, 'CustomerName': 'Alice', 'Type': 'Individual', 'entrydate': '2023-08-17'},
        {'CustomerID': 5, 'CustomerName': 'Bob', 'Type': 'Corporate', 'entrydate': '2023-08-17'},
        {'CustomerID': 7, 'CustomerName': 'Carol', 'Type': 'Corporate', 'entrydate': '2023-08-18'}
    ])

    new_sales_data = pd.DataFrame([
        {'ID': 6, 'CustomerID': 4, 'ProductDescription': 'Notebook', 'Qty': 50, 'Revenue': 10.00, 'salesdate': '2023-08-17'},
        {'ID': 7, 'CustomerID': 5, 'ProductDescription': 'Pen', 'Qty': 20, 'Revenue': 5.00, 'salesdate': '2023-08-17'},
        {'ID': 8, 'CustomerID': 6, 'ProductDescription': 'Pencil', 'Qty': 30, 'Revenue': 3.00, 'salesdate': '2023-08-18'}
    ])

    updated_customer_data = IncrementalLoader.perform_incremental_loading(customer_df, new_customer_data, timestamp_column_customer)
    updated_sales_data = IncrementalLoader.perform_incremental_loading(sales_df, new_sales_data, timestamp_column_sales)

    watermark_value = 'some_watermark'
    last_watermark = 'retrieve_last_watermark_value'

    DataProcessor.process_data(watermark_value, last_watermark, updated_customer_data, customer_df, 'updated_customer_data.csv', timestamp_column_customer)
    DataProcessor.process_data(watermark_value, last_watermark, updated_sales_data, sales_df, 'updated_sales_data.csv', timestamp_column_sales)

if __name__ == "__main__":
    main()